{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\joaquin\\\\Desktop\\\\projects\\\\pern\\\\pern-stack\\\\newproject\\\\src\\\\components\\\\projects.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProjectBox = () => {\n  _s();\n  const [projects, setProjects] = useState([]);\n  useEffect(() => {\n    // Fetch data when the component mounts\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/projects');\n        if (response.ok) {\n          const data = await response.json();\n          setProjects(data);\n        } else {\n          console.error('Failed to fetch projects.');\n        }\n      } catch (error) {\n        console.error('An error occurred:', error);\n      }\n    };\n    fetchData();\n  }, []); // Empty dependency array ensures useEffect runs only once on mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Projects\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), projects.map(project => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"project-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: project.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: project.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: project.imageUrl,\n        alt: project.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this)]\n    }, project.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(ProjectBox, \"TSrpuQX6QU8EgjQSxaAzj2u9i4o=\");\n_c = ProjectBox;\nexport default ProjectBox;\nvar _c;\n$RefreshReg$(_c, \"ProjectBox\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ProjectBox","_s","projects","setProjects","fetchData","response","fetch","ok","data","json","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","map","project","className","title","description","src","imageUrl","alt","id","_c","$RefreshReg$"],"sources":["C:/Users/joaquin/Desktop/projects/pern/pern-stack/newproject/src/components/projects.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst ProjectBox = () => {\r\n  const [projects, setProjects] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Fetch data when the component mounts\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:5000/api/projects');\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          setProjects(data);\r\n        } else {\r\n          console.error('Failed to fetch projects.');\r\n        }\r\n      } catch (error) {\r\n        console.error('An error occurred:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []); // Empty dependency array ensures useEffect runs only once on mount\r\n\r\n  return (\r\n    <div>\r\n      <h2>Projects</h2>\r\n      {projects.map((project) => (\r\n        <div key={project.id} className=\"project-box\">\r\n          <h3>{project.title}</h3>\r\n          <p>{project.description}</p>\r\n          <img src={project.imageUrl} alt={project.title} />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectBox;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMO,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,CAAC;QAClE,IAAID,QAAQ,CAACE,EAAE,EAAE;UACf,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;UAClCN,WAAW,CAACK,IAAI,CAAC;QACnB,CAAC,MAAM;UACLE,OAAO,CAACC,KAAK,CAAC,2BAA2B,CAAC;QAC5C;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC5C;IACF,CAAC;IAEDP,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEL,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAAa,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAChBd,QAAQ,CAACe,GAAG,CAAEC,OAAO,iBACpBnB,OAAA;MAAsBoB,SAAS,EAAC,aAAa;MAAAP,QAAA,gBAC3Cb,OAAA;QAAAa,QAAA,EAAKM,OAAO,CAACE;MAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACxBjB,OAAA;QAAAa,QAAA,EAAIM,OAAO,CAACG;MAAW;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC5BjB,OAAA;QAAKuB,GAAG,EAAEJ,OAAO,CAACK,QAAS;QAACC,GAAG,EAAEN,OAAO,CAACE;MAAM;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,GAH1CE,OAAO,CAACO,EAAE;MAAAZ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIf,CACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACf,EAAA,CAlCID,UAAU;AAAA0B,EAAA,GAAV1B,UAAU;AAoChB,eAAeA,UAAU;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}