{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\joaquin\\\\Desktop\\\\projects\\\\pern\\\\pern-stack\\\\newproject\\\\src\\\\components\\\\AgregarT.js\",\n  _s = $RefreshSig$();\n/*import React, { useState } from 'react';\r\n\r\nfunction CreateProjectBox() {\r\n  const [description, setDescription] = useState('');\r\n  const [image, setImage] = useState(null);\r\n\r\n  const handleDescriptionChange = (e) => {\r\n    setDescription(e.target.value);\r\n  };\r\n\r\n  const handleImageChange = (e) => {\r\n    // You can handle image upload here and set the 'image' state accordingly\r\n    // For example, using FileReader to convert the image to base64 or uploading to a server.\r\n    const selectedImage = e.target.files[0];\r\n    if (selectedImage) {\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        setImage(reader.result);\r\n      };\r\n      reader.readAsDataURL(selectedImage);\r\n    }\r\n  };\r\n\r\n  const handleSubmit =async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/insertText', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        \r\n\r\n       body: JSON.stringify({ longText: description }),\r\n      });\r\n  \r\n      if (response.ok) {\r\n        console.log('Description sent successfully.');\r\n        // Clear the description\r\n        setDescription('');\r\n      } else {\r\n        console.error('Failed to send description to the server.');\r\n        // Handle the error accordingly\r\n      }\r\n    } catch (error) {\r\n      console.error('An error occurred:', error);\r\n      // Handle the error accordingly\r\n    }\r\n    // You can perform your submit action here, e.g., sending data to a server\r\n    // You can access 'description' and 'image' states for data.\r\n    console.log('Description:', description);\r\n    console.log('Image:', image);\r\n\r\n    // Clear the description and image\r\n    setDescription('');\r\n    setImage(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"create-project-box\">\r\n      <h2>Create New Project</h2>\r\n      <div className=\"input-container\">\r\n        <textarea\r\n          rows=\"4\"\r\n          cols=\"50\"\r\n          placeholder=\"Project Description\"\r\n          value={description}\r\n          onChange={handleDescriptionChange}\r\n        />\r\n      </div>\r\n      <div className=\"input-container\">\r\n        <input type=\"file\" accept=\"image/*\" onChange={handleImageChange} />\r\n      </div>\r\n      {image && <img src={image} alt=\"Project Preview\" className=\"image-preview\" />}\r\n      <button onClick={handleSubmit}>Submit</button>\r\n    </div>\r\n  );\r\n}\r\n*/\n\n//tryng to send image and entire text\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreateProjectBox = () => {\n  _s();\n  const [image, setImage] = useState(null);\n  const handleImageChange = e => {\n    const selectedImage = e.target.files[0];\n    if (selectedImage) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        setImage(reader.result);\n      };\n      reader.readAsDataURL(selectedImage);\n    }\n  };\n  const handleUpload = async () => {\n    try {\n      if (!image) {\n        console.error('No image selected for upload.');\n        return;\n      }\n      const formData = new FormData();\n      formData.append('image', image);\n      console.log(image);\n      const response = await fetch('http://localhost:5000/api/upload', {\n        method: 'POST',\n        body: formData\n      });\n      if (response.ok) {\n        const data = await response.json();\n        console.log('Image uploaded successfully to Cloudinary. URL:', data.url);\n        // Do something with the Cloudinary URL, e.g., display it or use it in your application\n        setImage(null);\n      } else {\n        console.error('Failed to upload image to Cloudinary.');\n        // Handle the error accordingly\n      }\n    } catch (error) {\n      console.error('An error occurred:', error);\n      // Handle the error accordingly\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Image Upload to Cloudinary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        onChange: handleImageChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), image && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: image,\n      alt: \"Preview\",\n      style: {\n        maxWidth: '100%',\n        marginTop: '10px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpload,\n        children: \"Upload Image to Cloudinary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n};\n_s(CreateProjectBox, \"azb7M8tR7S/vp1+UqWJMufJLR5I=\");\n_c = CreateProjectBox;\nexport default CreateProjectBox;\nvar _c;\n$RefreshReg$(_c, \"CreateProjectBox\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","CreateProjectBox","_s","image","setImage","handleImageChange","e","selectedImage","target","files","reader","FileReader","onload","result","readAsDataURL","handleUpload","console","error","formData","FormData","append","log","response","fetch","method","body","ok","data","json","url","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","src","alt","style","maxWidth","marginTop","onClick","_c","$RefreshReg$"],"sources":["C:/Users/joaquin/Desktop/projects/pern/pern-stack/newproject/src/components/AgregarT.js"],"sourcesContent":["/*import React, { useState } from 'react';\r\n\r\nfunction CreateProjectBox() {\r\n  const [description, setDescription] = useState('');\r\n  const [image, setImage] = useState(null);\r\n\r\n  const handleDescriptionChange = (e) => {\r\n    setDescription(e.target.value);\r\n  };\r\n\r\n  const handleImageChange = (e) => {\r\n    // You can handle image upload here and set the 'image' state accordingly\r\n    // For example, using FileReader to convert the image to base64 or uploading to a server.\r\n    const selectedImage = e.target.files[0];\r\n    if (selectedImage) {\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        setImage(reader.result);\r\n      };\r\n      reader.readAsDataURL(selectedImage);\r\n    }\r\n  };\r\n\r\n  const handleSubmit =async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/insertText', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        \r\n\r\n       body: JSON.stringify({ longText: description }),\r\n      });\r\n  \r\n      if (response.ok) {\r\n        console.log('Description sent successfully.');\r\n        // Clear the description\r\n        setDescription('');\r\n      } else {\r\n        console.error('Failed to send description to the server.');\r\n        // Handle the error accordingly\r\n      }\r\n    } catch (error) {\r\n      console.error('An error occurred:', error);\r\n      // Handle the error accordingly\r\n    }\r\n    // You can perform your submit action here, e.g., sending data to a server\r\n    // You can access 'description' and 'image' states for data.\r\n    console.log('Description:', description);\r\n    console.log('Image:', image);\r\n\r\n    // Clear the description and image\r\n    setDescription('');\r\n    setImage(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"create-project-box\">\r\n      <h2>Create New Project</h2>\r\n      <div className=\"input-container\">\r\n        <textarea\r\n          rows=\"4\"\r\n          cols=\"50\"\r\n          placeholder=\"Project Description\"\r\n          value={description}\r\n          onChange={handleDescriptionChange}\r\n        />\r\n      </div>\r\n      <div className=\"input-container\">\r\n        <input type=\"file\" accept=\"image/*\" onChange={handleImageChange} />\r\n      </div>\r\n      {image && <img src={image} alt=\"Project Preview\" className=\"image-preview\" />}\r\n      <button onClick={handleSubmit}>Submit</button>\r\n    </div>\r\n  );\r\n}\r\n*/\r\n\r\n//tryng to send image and entire text\r\n\r\nimport React, { useState } from 'react';\r\n\r\nconst CreateProjectBox = () => {\r\n  const [image, setImage] = useState(null);\r\n\r\n  const handleImageChange = (e) => {\r\n    const selectedImage = e.target.files[0];\r\n    if (selectedImage) {\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        setImage(reader.result);\r\n      };\r\n      reader.readAsDataURL(selectedImage);\r\n    }\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    try {\r\n      if (!image) {\r\n        console.error('No image selected for upload.');\r\n        return;\r\n      }\r\n  \r\n      const formData = new FormData();\r\n      formData.append('image', image);\r\n      console.log(image)\r\n  \r\n      const response = await fetch('http://localhost:5000/api/upload', {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n  \r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log('Image uploaded successfully to Cloudinary. URL:', data.url);\r\n        // Do something with the Cloudinary URL, e.g., display it or use it in your application\r\n        setImage(null);\r\n      } else {\r\n        console.error('Failed to upload image to Cloudinary.');\r\n        // Handle the error accordingly\r\n      }\r\n    } catch (error) {\r\n      console.error('An error occurred:', error);\r\n      // Handle the error accordingly\r\n    }\r\n  };\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <h2>Image Upload to Cloudinary</h2>\r\n      <div>\r\n        <input type=\"file\" accept=\"image/*\" onChange={handleImageChange} />\r\n      </div>\r\n      {image && <img src={image} alt=\"Preview\" style={{ maxWidth: '100%', marginTop: '10px' }} />}\r\n      <div>\r\n        <button onClick={handleUpload}>Upload Image to Cloudinary</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\n\r\nexport default CreateProjectBox;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}